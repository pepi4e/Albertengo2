//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using Dpws.Client;
using Dpws.Client.Discovery;
using Dpws.Client.Eventing;
using Ws.Services;
using Ws.Services.Utilities;
using Ws.Services.Binding;
using Ws.Services.Soap;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;

namespace tempuri.org
{
    
    
    public class ISmartServiceClientProxy : DpwsClient
    {
        
        private IRequestChannel m_requestChannel = null;
        
        public ISmartServiceClientProxy(Binding binding, ProtocolVersion version) : 
                base(binding, version)
        {

            // Set client endpoint address
            m_requestChannel = m_localBinding.CreateClientChannel(new ClientBindingContext(m_version));
        }
        
        public virtual GetMeasurementsResponse GetMeasurements(GetMeasurements req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/ISmartService/GetMeasurements";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            GetMeasurementsDataContractSerializer reqDcs;
            reqDcs = new GetMeasurementsDataContractSerializer("GetMeasurements", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "GetMeasurements";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            GetMeasurementsResponseDataContractSerializer respDcs;
            respDcs = new GetMeasurementsResponseDataContractSerializer("GetMeasurementsResponse", "http://tempuri.org/");
            GetMeasurementsResponse resp;
            resp = ((GetMeasurementsResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
        
        public virtual CreateMeasurementResponse CreateMeasurement(CreateMeasurement req)
        {

            // Create request header
            String action;
            action = "http://tempuri.org/ISmartService/CreateMeasurement";
            WsWsaHeader header;
            header = new WsWsaHeader(action, null, EndpointAddress, m_version.AnonymousUri, null, null);
            WsMessage request = new WsMessage(header, req, WsPrefix.None);

            // Create request serializer
            CreateMeasurementDataContractSerializer reqDcs;
            reqDcs = new CreateMeasurementDataContractSerializer("CreateMeasurement", "http://tempuri.org/");
            request.Serializer = reqDcs;
            request.Method = "CreateMeasurement";


            // Send service request
            m_requestChannel.Open();
            WsMessage response = m_requestChannel.Request(request);
            m_requestChannel.Close();

            // Process response
            CreateMeasurementResponseDataContractSerializer respDcs;
            respDcs = new CreateMeasurementResponseDataContractSerializer("CreateMeasurementResponse", "http://tempuri.org/");
            CreateMeasurementResponse resp;
            resp = ((CreateMeasurementResponse)(respDcs.ReadObject(response.Reader)));
            response.Reader.Dispose();
            response.Reader = null;
            return resp;
        }
    }
}
